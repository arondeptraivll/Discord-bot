# bot.py (Phi√™n b·∫£n 4.3.3 - Render Deploy Fix)
import discord
from discord import app_commands, ui
import os
import datetime
import time
import asyncio
from typing import Optional, Callable
from threading import Thread

print("--- [LAUNCH] Bot ƒëang kh·ªüi ch·∫°y, phi√™n b·∫£n 4.3.3 (Render Deploy Fix)... ---")

from keep_alive import app # Thay ƒë·ªïi: nh·∫≠p Flask app
from spammer import SpamManager
import keygen

# ==============================================================================
# 1. C√ÄI ƒê·∫∂T
# ==============================================================================
DISCORD_TOKEN = os.environ.get('DISCORD_TOKEN')
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID')
SPAM_CHANNEL_ID = int(os.environ.get('SPAM_CHANNEL_ID', 1381799563488399452)) 

if not DISCORD_TOKEN or not ADMIN_USER_ID:
    print("!!! [CRITICAL] Thi·∫øu DISCORD_TOKEN ho·∫∑c ADMIN_USER_ID. Bot s·∫Ω kh√¥ng kh·ªüi ch·∫°y.")
    # Kh√¥ng exit() ·ªü ƒë√¢y n·ªØa v√¨ web server c√≥ th·ªÉ v·∫´n c·∫ßn ch·∫°y

spam_manager = SpamManager()
intents = discord.Intents.default()

# ==============================================================================
# 2. HELPER & UI
# ==============================================================================
def format_time_left(expires_at_str):
    try:
        expires_dt = datetime.datetime.fromisoformat(expires_at_str.replace("Z", "+00:00"))
        delta = expires_dt - datetime.datetime.now(datetime.timezone.utc)
        if delta.total_seconds() <= 0: return "H·∫øt h·∫°n"
        d, h, m = delta.days, delta.seconds // 3600, (delta.seconds % 3600) // 60
        if d > 0: return f"{d} ng√†y {h} gi·ªù"
        if h > 0: return f"{h} gi·ªù {m} ph√∫t"
        return f"{m} ph√∫t"
    except (ValueError, TypeError):
        return "Kh√¥ng x√°c ƒë·ªãnh"

class KeyEntryModal(ui.Modal, title='Nh·∫≠p License Key'):
    key_input = ui.TextInput(label='License Key', placeholder='D√°n key c·ªßa b·∫°n v√†o ƒë√¢y...')

    def __init__(self, original_message: discord.WebhookMessage):
        super().__init__(timeout=None)
        self.original_message = original_message
    
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        key_value = self.key_input.value
        result = spam_manager.validate_license(key_value)
        if result.get("valid"):
            key_info = result['key_info']
            embed = discord.Embed(
                title="‚úÖ K√≠ch ho·∫°t Key th√†nh c√¥ng!",
                description=f"Key c·ªßa b·∫°n c√≤n **{format_time_left(key_info.get('expires_at'))}** s·ª≠ d·ª•ng.",
                color=discord.Color.green()
            )
            embed.set_footer(text=f"Key: {key_value}")
            await self.original_message.edit(embed=embed, view=SpamControlView(key_value, key_info, self.original_message))
            await interaction.followup.send("Key h·ª£p l·ªá! B·∫£ng ƒëi·ªÅu khi·ªÉn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.", ephemeral=True)
        else:
            errors = {"NOT_FOUND": "Key kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá.", "EXPIRED": "Key ƒë√£ h·∫øt h·∫°n.", "SUSPENDED": "Key ƒë√£ b·ªã t·∫°m ng∆∞ng."}
            error_message = errors.get(result.get('code'), 'L·ªói kh√¥ng x√°c ƒë·ªãnh.')
            await interaction.followup.send(f"‚ùå L·ªói: {error_message} Vui l√≤ng th·ª≠ l·∫°i.", ephemeral=True)

class SpamConfigModal(ui.Modal, title='C·∫•u h√¨nh Spam'):
    target_input = ui.TextInput(label='Locket Target (Username/Link)', placeholder='V√≠ d·ª•: mylocketuser ho·∫∑c link invite')
    
    def __init__(self, key: str, key_info: dict, user_id: int, control_message: discord.WebhookMessage):
        super().__init__(timeout=None)
        self.key, self.key_info, self.user_id = key, key_info, user_id
        self.control_message = control_message
    
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True) 
        active_view = ActiveSpamView(key=self.key, original_interaction=interaction)
        def update_callback(status: str, stats: Optional[dict] = None, message: Optional[str] = None):
            asyncio.run_coroutine_threadsafe(
                active_view.update_message(status, stats, message), 
                client.loop
            )
        spam_manager.start_spam_session(self.user_id, self.target_input.value, update_callback)
        await self.control_message.delete()

class InitialView(ui.View):
    def __init__(self, original_message: Optional[discord.WebhookMessage] = None):
        super().__init__(timeout=300)
        self.original_message = original_message

    @ui.button(label='Nh·∫≠p Key', style=discord.ButtonStyle.primary, emoji='üîë')
    async def enter_key(self, interaction: discord.Interaction, button: ui.Button):
        if not self.original_message:
            return await interaction.response.send_message("L·ªói: Tin nh·∫Øn g·ªëc ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i.", ephemeral=True)
        await interaction.response.send_modal(KeyEntryModal(original_message=self.original_message))
    
    async def on_timeout(self):
        try:
            if self.original_message and self.original_message.embeds:
                embed = self.original_message.embeds[0]
                embed.description = "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng d√πng `/start` ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i."
                embed.color = discord.Color.dark_grey()
                await self.original_message.edit(embed=embed, view=None)
        except discord.NotFound: pass
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω on_timeout cho InitialView: {e}")

class SpamControlView(ui.View):
    def __init__(self, key: str, key_info: dict, control_message: discord.WebhookMessage):
        super().__init__(timeout=600)
        self.key, self.key_info, self.control_message = key, key_info, control_message
    
    @ui.button(label='B·∫Øt ƒê·∫ßu Spam', style=discord.ButtonStyle.green, emoji='üöÄ')
    async def start_spam(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(SpamConfigModal(self.key, self.key_info, interaction.user.id, self.control_message))
    
    async def on_timeout(self):
        try:
            if self.control_message and self.control_message.embeds:
                embed = self.control_message.embeds[0]
                embed.title = "‚åõ Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n"
                embed.description = "Vui l√≤ng d√πng `/start` ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i."
                embed.color = discord.Color.dark_grey()
                await self.control_message.edit(embed=embed, view=None)
        except discord.NotFound: pass
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω on_timeout cho SpamControlView: {e}")

class ActiveSpamView(ui.View):
    def __init__(self, key: str, original_interaction: discord.Interaction):
        super().__init__(timeout=None)
        self.key, self.original_interaction, self.status_message = key, original_interaction, None
        
    async def update_message(self, status: str, stats: Optional[dict] = None, message: Optional[str] = None):
        if status == "started": 
            self.status_message = await self.original_interaction.followup.send(message, view=self, ephemeral=True)
            return
        if status == "error":
            await self.original_interaction.followup.send(f"‚ùå **L·ªói Kh·ªüi ƒê·ªông:** {message}", ephemeral=True)
            self.stop()
            return
        if not self.status_message: return
        embed = discord.Embed()
        try:
            if status == "running":
                embed.title, embed.color = "üöÄ Tr·∫°ng th√°i Spam: ƒêang Ch·∫°y", discord.Color.blue()
                embed.add_field(name="Th√†nh C√¥ng", value=f"‚úÖ {stats['success']}", inline=True).add_field(name="Th·∫•t B·∫°i", value=f"‚ùå {stats['failed']}", inline=True).add_field(name="Th·ªùi Gian", value=f"‚è≥ {datetime.timedelta(seconds=int(time.time() - stats['start_time']))}", inline=True)
                await self.status_message.edit(embed=embed)
            elif status == "stopped":
                self.stop()
                embed.title, embed.color = "üõë Phi√™n Spam ƒê√£ D·ª´ng", discord.Color.dark_grey()
                embed.add_field(name="T·ªïng Th√†nh C√¥ng", value=f"‚úÖ {stats['success']}").add_field(name="T·ªïng Th·∫•t B·∫°i", value=f"‚ùå {stats['failed']}")
                await self.status_message.edit(content="Ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ ƒë√≥ng tin nh·∫Øn n√†y ho·∫∑c d√πng `/start` ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.", embed=embed, view=None)
        except discord.NotFound: self.stop()
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t ActiveSpamView: {e}")
            self.stop()

    @ui.button(label='D·ª´ng Spam', style=discord.ButtonStyle.red, emoji='üõë')
    async def stop_spam(self, interaction: discord.Interaction, button: ui.Button):
        if spam_manager.stop_spam_session(interaction.user.id):
            button.disabled = True
            await interaction.response.edit_message(content="ƒêang x·ª≠ l√Ω y√™u c·∫ßu d·ª´ng...", view=self)
        else: await interaction.response.send_message("Kh√¥ng t√¨m th·∫•y phi√™n spam ƒë·ªÉ d·ª´ng.", ephemeral=True)

# ==============================================================================
# 3. CLIENT & L·ªÜNH
# ==============================================================================
class MyBotClient(discord.Client):
    def __init__(self, *, intents: discord.Intents):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        await self.tree.sync()
        print("--- [SYNC] ƒê·ªìng b·ªô l·ªánh l√™n Discord th√†nh c√¥ng. ---")

    async def on_ready(self):
        print(f'--- [READY] Bot ƒë√£ ƒëƒÉng nh·∫≠p: {self.user} ---')

client = MyBotClient(intents=intents)

@client.tree.command(name="start", description="B·∫Øt ƒë·∫ßu m·ªôt phi√™n l√†m vi·ªác m·ªõi.")
async def start(interaction: discord.Interaction):
    if interaction.channel.id != SPAM_CHANNEL_ID:
        return await interaction.response.send_message(f"L·ªánh n√†y ch·ªâ d√πng ƒë∆∞·ª£c trong <#{SPAM_CHANNEL_ID}>.", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    embed = discord.Embed(title="üëã Ch√†o m·ª´ng ƒë·∫øn v·ªõi ZLocket Spammer Bot", description="ƒê·ªÉ b·∫Øt ƒë·∫ßu, vui l√≤ng nh·∫≠p License Key c·ªßa b·∫°n.", color=discord.Color.purple())
    embed.add_field(name="L√†m th·∫ø n√†o ƒë·ªÉ c√≥ Key?", value="Vui l√≤ng li√™n h·ªá v·ªõi Admin ƒë·ªÉ ƒë∆∞·ª£c c·∫•p key.", inline=False).set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Zenn.")
    
    # G·ª≠i tin nh·∫Øn v√† l·∫•y ƒë·ªëi t∆∞·ª£ng c·ªßa n√≥
    initial_message = await interaction.followup.send(embed=embed, ephemeral=True, wait=True)
    # T·∫°o View v·ªõi tham chi·∫øu ƒë·∫øn tin nh·∫Øn ƒë√≥
    view = InitialView(original_message=initial_message)
    # Ch·ªânh s·ª≠a tin nh·∫Øn ƒë·ªÉ th√™m View v√†o
    await initial_message.edit(view=view)

@client.tree.command(name="genkey", description="[Admin] T·∫°o m·ªôt license key m·ªõi.")
@app_commands.describe(user="Ng∆∞·ªùi d√πng s·∫Ω nh·∫≠n key n√†y.", days="S·ªë ng√†y hi·ªáu l·ª±c c·ªßa key.")
async def genkey(interaction: discord.Interaction, user: discord.User, days: int):
    if str(interaction.user.id) != ADMIN_USER_ID:
        return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    try:
        key_info = keygen.add_key(days, user.id, interaction.user.id)
        await interaction.followup.send(f"‚úÖ **ƒê√£ t·∫°o key th√†nh c√¥ng!**\n\n**Ng∆∞·ªùi d√πng:** {user.mention}\n**Hi·ªáu l·ª±c:** {days} ng√†y\n**Key:** `{key_info['key']}`\n\nüëâ *H√£y sao ch√©p v√† g·ª≠i key n√†y cho ng∆∞·ªùi d√πng.*", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o key: {e}", ephemeral=True)

@client.tree.command(name="listkeys", description="[Admin] Xem danh s√°ch c√°c key ƒëang ho·∫°t ƒë·ªông.")
async def listkeys(interaction: discord.Interaction):
    if str(interaction.user.id) != ADMIN_USER_ID: 
        return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    keys = {k: v for k, v in keygen.load_keys().items() if v.get('is_active') and datetime.datetime.fromisoformat(v['expires_at']) > datetime.datetime.now(datetime.timezone.utc)}
    if not keys: 
        return await interaction.followup.send("Kh√¥ng c√≥ key n√†o ƒëang ho·∫°t ƒë·ªông.", ephemeral=True)

    desc = "```" + "Key               | User ID             | Th·ªùi Gian C√≤n L·∫°i\n" + "------------------|---------------------|--------------------\n"
    for k, v in list(keys.items())[:20]:
        desc += f"{k:<17} | {v.get('user_id', 'N/A'):<19} | {format_time_left(v['expires_at'])}\n"
    if len(keys) > 20: 
        desc += f"\n... v√† {len(keys) - 20} key kh√°c."
        
    embed = discord.Embed(title=f"üîë {len(keys)} Keys ƒëang ho·∫°t ƒë·ªông", description=desc + "```", color=discord.Color.blue())
    await interaction.followup.send(embed=embed, ephemeral=True)

@client.tree.command(name="delkey", description="[Admin] V√¥ hi·ªáu h√≥a m·ªôt key.")
@app_commands.describe(key="Key c·∫ßn x√≥a.")
async def delkey(interaction: discord.Interaction, key: str):
    if str(interaction.user.id) != ADMIN_USER_ID: 
        return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.", ephemeral=True)

    await interaction.response.defer(ephemeral=True)
    if keygen.delete_key(key): 
        await interaction.followup.send(f"‚úÖ Key `{key}` ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a th√†nh c√¥ng.", ephemeral=True)
    else: 
        await interaction.followup.send(f"‚ùå Kh√¥ng t√¨m th·∫•y key `{key}` trong h·ªá th·ªëng.", ephemeral=True)


# ==============================================================================
# 4. KH·ªûI CH·∫†Y (LOGIC M·ªöI CHO RENDER)
# ==============================================================================

# H√†m ch·∫°y bot discord trong m·ªôt lu·ªìng ri√™ng
def run_bot():
    if not DISCORD_TOKEN:
        print("!!! [CRITICAL] Thi·∫øu DISCORD_TOKEN, bot kh√¥ng th·ªÉ ch·∫°y.")
        return
    try:
        # C·∫ßn m·ªôt v√≤ng l·∫∑p s·ª± ki·ªán m·ªõi cho lu·ªìng n√†y
        asyncio.run(client.start(DISCORD_TOKEN))
    except discord.errors.LoginFailure:
        print("!!! [CRITICAL] L·ªói LoginFailure: DISCORD_TOKEN kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        print(f"!!! [CRITICAL] L·ªói khi ch·∫°y bot trong lu·ªìng: {e}")


if __name__ == "__main__":
    # B·∫Øt ƒë·∫ßu lu·ªìng ch·∫°y bot Discord
    bot_thread = Thread(target=run_bot)
    bot_thread.daemon = True # ƒê·∫£m b·∫£o lu·ªìng bot t·∫Øt khi lu·ªìng ch√≠nh t·∫Øt
    bot_thread.start()
    
    # L·∫•y c·ªïng t·ª´ bi·∫øn m√¥i tr∆∞·ªùng c·ªßa Render
    port = int(os.environ.get('PORT', 8080))
    # Ch·∫°y Flask app (web server) ·ªü lu·ªìng ch√≠nh. 
    # Render s·∫Ω k·∫øt n·ªëi v·ªõi c·ªïng n√†y.
    print(f"--- [WEB] Web server ƒëang kh·ªüi ch·∫°y tr√™n c·ªïng {port}... ---")
    app.run(host='0.0.0.0', port=port)
