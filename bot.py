# bot.py
import discord
from discord import app_commands, ui
import os
import datetime
import time
from typing import Optional

print("--- [DEBUG] Bot ƒëang kh·ªüi ch·∫°y v·ªõi h·ªá th·ªëng key n·ªôi b·ªô. ---")

# C√°c file c·ªßa ch√∫ng ta
from keep_alive import keep_alive
from spammer import SpamManager
import keygen # Import module keygen c·ªßa ch√∫ng ta

# --- C√†i ƒë·∫∑t ---
DISCORD_TOKEN = os.environ.get('DISCORD_TOKEN')
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID') # ID Discord c·ªßa Admin
SPAM_CHANNEL_ID = 1381799563488399452 # !!! THAY TH·∫æ B·∫∞NG ID K√äNH C·ª¶A B·∫†N !!!

if not ADMIN_USER_ID:
    print("!!! CRITICAL WARNING: Bi·∫øn m√¥i tr∆∞·ªùng ADMIN_USER_ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. L·ªánh /genkey s·∫Ω kh√¥ng ho·∫°t ƒë·ªông an to√†n!!!")

# --- Kh·ªüi t·∫°o ---
spam_manager = SpamManager() # Kh√¥ng c·∫ßn truy·ªÅn tham s·ªë n·ªØa
intents = discord.Intents.default()
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)
user_sessions = {}

# === C√ÅC L·ªöP UI (Modal, View) GI·ªÆ NGUY√äN NH∆Ø C≈®, KH√îNG C·∫¶N THAY ƒê·ªîI ===
# T√¥i s·∫Ω r√∫t g·ªçn ph·∫ßn n√†y ƒë·ªÉ d·ªÖ ƒë·ªçc, b·∫°n ch·ªâ c·∫ßn gi·ªØ nguy√™n code UI ƒë√£ c√≥.
class KeyEntryModal(ui.Modal, title='Nh·∫≠p License Key'):
    # ... code gi·ªØ nguy√™n ...
    key_input = ui.TextInput(label='License Key', placeholder='D√°n license key c·ªßa b·∫°n v√†o ƒë√¢y...', style=discord.TextStyle.short)
    async def on_submit(self, interaction: discord.Interaction):
        license_key = self.key_input.value
        await interaction.response.defer(ephemeral=True, thinking=True)
        validation_result = spam_manager.validate_license(license_key)
        if validation_result.get("valid"):
            user_sessions[interaction.user.id] = {"key": license_key, "expiry": validation_result["expiry"]}
            expiry_dt = datetime.datetime.fromisoformat(validation_result['expiry'].replace("Z", "+00:00"))
            expiry_str = expiry_dt.strftime('%d/%m/%Y %H:%M:%S UTC')
            view = SpamControlView(user_id=interaction.user.id)
            await interaction.followup.send(f"‚úÖ Key h·ª£p l·ªá!\n**Hi·ªáu l·ª±c t·ªõi:** {expiry_str}", view=view, ephemeral=True)
        else:
            #... ph·∫ßn code b√°o l·ªói gi·ªØ nguy√™n...
            code = validation_result.get("code", "UNKNOWN_ERROR")
            error_messages = {"NOT_FOUND": "Key kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá.", "EXPIRED": "Key ƒë√£ h·∫øt h·∫°n.", "SUSPENDED": "Key ƒë√£ b·ªã t·∫°m ng∆∞ng."}
            await interaction.followup.send(f"‚ùå **L·ªói:** {error_messages.get(code, f'L·ªói kh√¥ng x√°c ƒë·ªãnh. M√£: {code}')}", ephemeral=True)
# ... C√°c class UI kh√°c (SpamConfigModal, SpamControlView, ActiveSpamView, InitialView) gi·ªØ nguy√™n y h·ªát...
class SpamConfigModal(ui.Modal, title='C·∫•u h√¨nh phi√™n Spam'):
    target_input = ui.TextInput(label='Locket Target (Username ho·∫∑c Link)', required=True)
    def __init__(self, user_id: int):
        super().__init__(); self.user_id = user_id
    async def on_submit(self, interaction: discord.Interaction):
        target = self.target_input.value
        await interaction.response.defer(ephemeral=True, thinking=True)
        active_view = ActiveSpamView(user_id=self.user_id, interaction=interaction)
        async def update_callback(status: str, stats: Optional[dict] = None, message: Optional[str] = None): await active_view.update_message(status, stats, message)
        spam_manager.start_spam_session(user_id=self.user_id, target=target, update_callback=update_callback)
class SpamControlView(ui.View):
    def __init__(self, user_id: int):
        super().__init__(timeout=300); self.user_id = user_id
    @ui.button(label='B·∫Øt ƒê·∫ßu Spam', style=discord.ButtonStyle.green, emoji='üöÄ')
    async def start_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(SpamConfigModal(user_id=self.user_id))
        self.stop(); await interaction.message.edit(view=None)
    @ui.button(label='H·ªßy', style=discord.ButtonStyle.grey)
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        self.stop(); await interaction.response.edit_message(content='ƒê√£ h·ªßy.', view=None)
class ActiveSpamView(ui.View):
    def __init__(self, user_id: int, interaction: discord.Interaction):
        super().__init__(timeout=None); self.user_id = user_id; self.interaction = interaction; self.message = None
    async def update_message(self, status: str, stats: Optional[dict] = None, message: Optional[str] = None):
        if not self.interaction: return
        if status == "started": self.message = await self.interaction.followup.send(message, view=self, ephemeral=True); return
        if self.message is None:
            if status == "error": await self.interaction.followup.send(f"‚ùå L·ªói: {message}", ephemeral=True)
            return
        try:
            if status == "running":
                embed = discord.Embed(title="üöÄ Tr·∫°ng th√°i Spam", color=discord.Color.blue()).add_field(name="Th√†nh C√¥ng", value=f"‚úÖ {stats.get('success', 0)}").add_field(name="Th·∫•t B·∫°i", value=f"‚ùå {stats.get('failed', 0)}").add_field(name="Th·ªùi Gian Ch·∫°y", value=f"‚è≥ {datetime.timedelta(seconds=int(time.time() - stats['start_time']))}")
                await self.message.edit(embed=embed, view=self)
            elif status == "stopped":
                self.stop()
                embed = discord.Embed(title="üõë Phi√™n Spam ƒê√£ D·ª´ng", color=discord.Color.default()).add_field(name="T·ªïng Th√†nh C√¥ng", value=f"‚úÖ {stats.get('success', 0)}").add_field(name="T·ªïng Th·∫•t B·∫°i", value=f"‚ùå {stats.get('failed', 0)}").add_field(name="T·ªïng Th·ªùi Gian", value=f"‚è≥ {datetime.timedelta(seconds=int(time.time() - stats['start_time']))}")
                await self.message.edit(embed=embed, view=None)
        except discord.errors.NotFound: self.stop()
    @ui.button(label='D·ª´ng Spam', style=discord.ButtonStyle.red, emoji='üõë')
    async def stop_button(self, interaction: discord.Interaction, button: ui.Button):
        if spam_manager.stop_spam_session(self.user_id):
            await interaction.response.defer(); button.disabled = True
            await self.message.edit(view=self)
        else: await interaction.response.send_message("Kh√¥ng c√≥ phi√™n spam n√†o ƒëang ch·∫°y.", ephemeral=True)
class InitialView(ui.View):
    def __init__(self): super().__init__(timeout=300)
    @ui.button(label='Nh·∫≠p Key', style=discord.ButtonStyle.primary, emoji='üîë')
    async def enter_key_button(self, interaction: discord.Interaction, button: ui.Button): await interaction.response.send_modal(KeyEntryModal())

# --- L·ªÜNH M·ªöI CHO ADMIN ---
@tree.command(name="genkey", description="[Admin] T·∫°o m·ªôt license key m·ªõi cho ng∆∞·ªùi d√πng.")
@app_commands.describe(user="Ng∆∞·ªùi d√πng s·∫Ω nh·∫≠n ƒë∆∞·ª£c key.", duration_days="S·ªë ng√†y hi·ªáu l·ª±c c·ªßa key.")
async def genkey_command(interaction: discord.Interaction, user: discord.User, duration_days: int):
    # Ki·ªÉm tra xem ng∆∞·ªùi g√µ l·ªánh c√≥ ph·∫£i admin kh√¥ng
    if str(interaction.user.id) != ADMIN_USER_ID:
        await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", ephemeral=True)
        return

    await interaction.response.defer(ephemeral=True)

    try:
        new_key_info = keygen.add_key(
            duration_days=duration_days,
            created_for_user_id=user.id,
            creator_id=interaction.user.id
        )
        
        key = new_key_info['key']
        expiry_dt = new_key_info['expires_at']
        expiry_str = expiry_dt.strftime('%d/%m/%Y %H:%M:%S UTC')

        # G·ª≠i key cho admin m·ªôt c√°ch ri√™ng t∆∞
        await interaction.followup.send(
            f"‚úÖ ƒê√£ t·∫°o key th√†nh c√¥ng cho ng∆∞·ªùi d√πng {user.mention}.\n"
            f"Key: `{key}`\n"
            f"Hi·ªáu l·ª±c: {duration_days} ng√†y (t·ªõi {expiry_str})",
            ephemeral=True
        )

        # G·ª≠i key cho ng∆∞·ªùi d√πng qua DM
        try:
            dm_message = (
                f"üéâ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c m·ªôt license key cho zLocket Bot Spammer!\n\n"
                f"**Key c·ªßa b·∫°n:** `{key}`\n"
                f"**Hi·ªáu l·ª±c:** {duration_days} ng√†y.\n\n"
                f"ƒê·ªÉ s·ª≠ d·ª•ng, h√£y v√†o k√™nh <#{SPAM_CHANNEL_ID}> v√† g√µ l·ªánh `/start`."
            )
            await user.send(dm_message)
        except discord.Forbidden:
            await interaction.followup.send(
                f"‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i DM cho ng∆∞·ªùi d√πng {user.mention}. H√£y g·ª≠i key cho h·ªç b·∫±ng tay.",
                ephemeral=True
            )

    except Exception as e:
        await interaction.followup.send(f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o key: {e}", ephemeral=True)

# --- C√°c l·ªánh c≈© ---
@tree.command(name="start", description="B·∫Øt ƒë·∫ßu m·ªôt phi√™n l√†m vi·ªác v·ªõi zLocket Spammer.")
async def start_command(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    if interaction.channel.id != SPAM_CHANNEL_ID:
        await interaction.followup.send(f"L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong k√™nh <#{SPAM_CHANNEL_ID}>.", ephemeral=True)
        return
    embed = discord.Embed(title="Ch√†o m·ª´ng ƒë·∫øn v·ªõi zLocket Bot Spammer", description="Vui l√≤ng nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ nh·∫≠p License Key.", color=discord.Color.purple())
    embed.set_footer(text="M·ªçi t∆∞∆°ng t√°c c·ªßa b·∫°n v·ªõi bot t·∫°i ƒë√¢y ƒë·ªÅu l√† ri√™ng t∆∞.")
    await interaction.followup.send(embed=embed, view=InitialView(), ephemeral=True)

@tree.command(name="hello", description="L·ªánh test ƒë∆°n gi·∫£n.")
async def hello_command(interaction: discord.Interaction):
    await interaction.response.send_message(f"Xin ch√†o, {interaction.user.name}!", ephemeral=True)

# --- Kh·ªüi ch·∫°y Bot ---
@client.event
async def on_ready():
    await tree.sync()
    print(f'Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {client.user}')

if DISCORD_TOKEN and ADMIN_USER_ID:
    keep_alive()
    client.run(DISCORD_TOKEN)
else:
    print("!!! CRITICAL ERROR: Thi·∫øu DISCORD_TOKEN ho·∫∑c ADMIN_USER_ID. Bot kh√¥ng th·ªÉ kh·ªüi ch·∫°y. !!!")
