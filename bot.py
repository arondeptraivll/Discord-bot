# bot.py (Version 4.6 - Library Mode)
import discord
from discord import app_commands, ui
import os
import datetime
import time
import asyncio
from typing import Optional

# === CHANGED === Thay ƒë·ªïi th√¥ng b√°o kh·ªüi ƒë·ªông
print("--- [BOT MODULE] Bot module loaded. ---")

# Import c√°c file kh√°c nh∆∞ m·ªôt th∆∞ vi·ªán
from spammer import SpamManager
import keygen

# C√ÄI ƒê·∫∂T
DISCORD_TOKEN = os.environ.get('DISCORD_TOKEN')
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID')
SPAM_CHANNEL_ID = int(os.environ.get('SPAM_CHANNEL_ID', 1381799563488399452))

if not DISCORD_TOKEN or not ADMIN_USER_ID:
    print("!!! [CRITICAL] Thi·∫øu DISCORD_TOKEN ho·∫∑c ADMIN_USER_ID.")
    exit()

spam_manager = SpamManager()
intents = discord.Intents.default()

# HELPER
def format_time_left(expires_at_str):
    expires_dt = datetime.datetime.fromisoformat(expires_at_str.replace("Z", "+00:00"))
    delta = expires_dt - datetime.datetime.now(datetime.timezone.utc)
    if delta.total_seconds() <= 0: return "H·∫øt h·∫°n"
    d, h, m = delta.days, delta.seconds // 3600, (delta.seconds % 3600) // 60
    if d > 0: return f"{d} ng√†y {h} gi·ªù"
    if h > 0: return f"{h} gi·ªù {m} ph√∫t"
    return f"{m} ph√∫t"

# === UI CLASSES ===
class KeyEntryModal(ui.Modal, title='Nh·∫≠p License Key'):
    key_input = ui.TextInput(label='License Key', placeholder='D√°n key c·ªßa b·∫°n v√†o ƒë√¢y...')
    def __init__(self, original_message: discord.WebhookMessage):
        super().__init__(timeout=None)
        self.original_message = original_message
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        key_value = self.key_input.value; result = spam_manager.validate_license(key_value)
        if result.get("valid"):
            key_info = result['key_info']
            embed = discord.Embed(title="‚úÖ K√≠ch ho·∫°t Key th√†nh c√¥ng!", description=f"Key c·ªßa b·∫°n c√≤n **{format_time_left(key_info['expires_at'])}**.", color=discord.Color.green())
            await self.original_message.edit(embed=embed, view=SpamControlView(key_value, self.original_message))
            await interaction.followup.send("Key h·ª£p l·ªá!", ephemeral=True)
        else:
            errors = {"NOT_FOUND":"Key kh√¥ng t·ªìn t·∫°i...","EXPIRED":"Key ƒë√£ h·∫øt h·∫°n...","SUSPENDED":"Key ƒë√£ b·ªã t·∫°m ng∆∞ng..."}
            await interaction.followup.send(f"‚ùå L·ªói: {errors.get(result.get('code'), 'L·ªói kh√¥ng x√°c ƒë·ªãnh.')}", ephemeral=True)

class SpamConfigModal(ui.Modal, title='C·∫•u h√¨nh Spam'):
    target_input = ui.TextInput(label='Locket Target (Username/Link)')
    custom_name_input = ui.TextInput(label='T√™n Custom cho t√†i kho·∫£n spam', required=False, max_length=20)
    threads_input = ui.TextInput(label='S·ªë lu·ªìng (1-50, m·∫∑c ƒë·ªãnh 25)', default="25", max_length=2)
    def __init__(self, key: str, control_message: discord.WebhookMessage):
        super().__init__(timeout=None)
        self.key, self.control_message = key, control_message
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        try:
            num_threads = int(self.threads_input.value)
            if not 1 <= num_threads <= 50: raise ValueError
        except (ValueError, TypeError):
            await interaction.followup.send("‚ùå S·ªë lu·ªìng kh√¥ng h·ª£p l·ªá (1-50).", ephemeral=True)
            return
        active_view = ActiveSpamView(interaction)
        def update_callback(status, stats=None, message=None):
            asyncio.run_coroutine_threadsafe(active_view.update_message(status, stats, message), client.loop)
        custom_name = self.custom_name_input.value or "zLocket Tool Pro"
        async def run_spam(): await spam_manager.start_spam_session(interaction.user.id, self.target_input.value, custom_name, num_threads, update_callback)
        asyncio.create_task(run_spam())
        await self.control_message.delete()

class InitialView(ui.View):
    def __init__(self, original_message: Optional[discord.WebhookMessage]=None): super().__init__(timeout=300); self.original_message = original_message
    @ui.button(label='Nh·∫≠p Key', style=discord.ButtonStyle.primary, emoji='üîë')
    async def enter_key(self, i: discord.Interaction, b: ui.Button): await i.response.send_modal(KeyEntryModal(self.original_message))
    async def on_timeout(self):
        try:
            embed=self.original_message.embeds[0]; embed.description="Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n."; embed.color=discord.Color.dark_grey()
            await self.original_message.edit(embed=embed, view=None)
        except: pass

class SpamControlView(ui.View):
    def __init__(self, key: str, control_message: discord.WebhookMessage): super().__init__(timeout=600); self.key,self.control_message=key,control_message
    @ui.button(label='B·∫Øt ƒê·∫ßu Spam', style=discord.ButtonStyle.green, emoji='üöÄ')
    async def start_spam(self, i: discord.Interaction, b: ui.Button): await i.response.send_modal(SpamConfigModal(self.key, self.control_message))
    async def on_timeout(self):
        try:
            embed=self.control_message.embeds[0]; embed.title="‚åõ Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n"; embed.description="D√πng `/start` ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i."; embed.color=discord.Color.dark_grey()
            await self.control_message.edit(embed=embed, view=None)
        except: pass

class ActiveSpamView(ui.View):
    def __init__(self, i: discord.Interaction): super().__init__(timeout=None); self.original_interaction=i; self.status_message=None
    async def update_message(self, status, stats=None, message=None):
        if status=="started": self.status_message=await self.original_interaction.followup.send(message,view=self,ephemeral=True);return
        if status=="error": await self.original_interaction.followup.send(f"‚ùå **L·ªói:** {message}",ephemeral=True);self.stop();return
        if not self.status_message: return
        embed = discord.Embed()
        try:
            if status=="running":
                embed.title,embed.color="üöÄ Tr·∫°ng th√°i Spam: ƒêang Ch·∫°y",discord.Color.blue()
                runtime=datetime.timedelta(seconds=int(time.time()-stats['start_time']))
                embed.add_field(name="‚úÖ Accounts", value=f"{stats['accounts']}", inline=True).add_field(name="üíå Y√™u c·∫ßu", value=f"{stats['requests']}", inline=True)
                embed.add_field(name="‚ùå L·ªói", value=f"{stats['failed']}", inline=True).add_field(name="‚è≥ Th·ªùi gian", value=f"{runtime}", inline=False)
                await self.status_message.edit(embed=embed)
            elif status=="stopped":
                self.stop(); embed.title,embed.color="üõë Phi√™n Spam ƒê√£ D·ª´ng",discord.Color.dark_grey()
                embed.description="Ho√†n th√†nh ho·∫∑c d·ª´ng b·ªüi ng∆∞·ªùi d√πng."
                embed.add_field(name="‚úÖ T·ªïng Accounts", value=f"{stats['accounts']}", inline=True).add_field(name="üíå T·ªïng Y√™u C·∫ßu", value=f"{stats['requests']}", inline=True).add_field(name="‚ùå T·ªïng L·ªói", value=f"{stats['failed']}", inline=True)
                await self.status_message.edit(content="Ho√†n t·∫•t!", embed=embed, view=None)
        except(discord.errors.NotFound, asyncio.CancelledError): self.stop()
        except Exception: self.stop()
    @ui.button(label='D·ª´ng Spam', style=discord.ButtonStyle.red, emoji='üõë')
    async def stop_spam(self, i: discord.Interaction, b: ui.Button):
        if spam_manager.stop_spam_session(i.user.id): b.disabled=True; await i.response.edit_message(content="*ƒêang x·ª≠ l√Ω y√™u c·∫ßu d·ª´ng...*", view=self)
        else: await i.response.send_message("Kh√¥ng t√¨m th·∫•y phi√™n spam.", ephemeral=True)

# CLIENT & COMMANDS
class MyBotClient(discord.Client):
    def __init__(self, *, intents: discord.Intents): super().__init__(intents=intents); self.tree = app_commands.CommandTree(self)
    async def setup_hook(self): await self.tree.sync(); print("--- [BOT MODULE] ƒê·ªìng b·ªô l·ªánh th√†nh c√¥ng ---")
    async def on_ready(self): print(f'--- [BOT MODULE] Bot ƒë√£ ƒëƒÉng nh·∫≠p: {self.user} ---')

client = MyBotClient(intents=intents)

@client.tree.command(name="start", description="B·∫Øt ƒë·∫ßu m·ªôt phi√™n l√†m vi·ªác m·ªõi.")
async def start(i: discord.Interaction):
    if i.channel.id != SPAM_CHANNEL_ID: return await i.response.send_message(f"D√πng l·ªánh trong <#{SPAM_CHANNEL_ID}>.",ephemeral=True)
    await i.response.defer(ephemeral=True)
    embed = discord.Embed(title="üëã Ch√†o m·ª´ng ƒë·∫øn v·ªõi ZLocket Spammer",description="Nh·∫≠p License Key ƒë·ªÉ b·∫Øt ƒë·∫ßu.",color=discord.Color.purple())
    embed.add_field(name="C√°ch c√≥ Key?", value="Li√™n h·ªá Admin.").set_footer(text="Bot by Zenn.")
    msg = await i.followup.send(embed=embed,ephemeral=True); await msg.edit(view=InitialView(msg))

# C√°c l·ªánh admin (gi·ªØ nguy√™n)
@client.tree.command(name="genkey",description="[Admin] T·∫°o key.")
@app_commands.describe(user="Ng∆∞·ªùi d√πng",days="S·ªë ng√†y")
async def genkey(i: discord.Interaction, user: discord.User, days: int):
    if str(i.user.id)!=ADMIN_USER_ID:return await i.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn.",ephemeral=True)
    await i.response.defer(ephemeral=True)
    try:
        k_info=keygen.add_key(days,user.id,i.user.id)
        await i.followup.send(f"‚úÖ **Key:** `{k_info['key']}`\ncho {user.mention} (hi·ªáu l·ª±c {days} ng√†y).",ephemeral=True)
    except Exception as e: await i.followup.send(f"‚ùå L·ªói: {e}",ephemeral=True)
